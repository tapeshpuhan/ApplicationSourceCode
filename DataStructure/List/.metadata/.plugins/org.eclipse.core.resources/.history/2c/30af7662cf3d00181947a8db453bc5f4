/*
 * Task.h
 *
 *  Created on: 11-Apr-2018
 *      Author: tapesh
 */

#ifndef TASK_H_
#define TASK_H_

#include<iostream>
#include<string>
#include<vector>
#include<fstream>
#include<map>
#include<set>
#include <limits>
#include<memory>
#include<set>
#include <algorithm>
#include<queue>
#include <mutex>
#include <condition_variable>
#include<thread>
#include <deque>
#include<unordered_map>
#include <functional>
#include<atomic>

using namespace std;

class Task
{
  public:
   virtual void call(){}
};


class TaskQ
{
  private:
    mutable std::mutex mut;
    std::queue<std::shared_ptr<Task>> q;
    std::condition_variable data_cond;
    std::atomic<int> _shutdown;
  public:
    TaskQ():_shutdown(0){}
  void Shutdown()
  {
    std::lock_guard<std::mutex> lk(mut);
    _shutdown = 1;
    data_cond.notify_all();
  }

   void push(std::shared_ptr<Task> e)
    {
      std::lock_guard<std::mutex> lk(mut);
      q.push(e);
      data_cond.notify_all();
    }

     std::shared_ptr<Task> wait_and_pop()
    {
      std::unique_lock<std::mutex> lk(mut);
      std::shared_ptr<Task> res=nullptr;
      data_cond.wait(lk, [&]{return (!q.empty() || _shutdown.load());});
      if(!_shutdown.load())
      {
        res = q.front();
        q.pop();
      }else
      {
        std::cout << "Shutdown initiated" << std::endl;
      }
      return res;
   }
 };

namespace helper
{
	template <std::size_t... Ts>
	struct index {};

	template <std::size_t N, std::size_t... Ts>
	struct gen_seq : gen_seq<N - 1, N - 1, Ts...> {};

	template <std::size_t... Ts>
	struct gen_seq<0, Ts...> : index<Ts...> {};
}

template <typename... Ts>
class Task_impl:public Task
{
	private:
		std::function<void (Ts...)> f;
		std::tuple<Ts...> args;
	public:
		template <typename F>
		Task_impl(F&& func,Ts&&... args):
			 f(std::forward<F>(func)),
			 args(std::make_tuple(std::forward<Ts>(args)...))
		{

		}

		template <typename... Args, std::size_t... Is>
		void func(std::tuple<Args...>& tup, helper::index<Is...>)
		{
			f(std::get<Is>(tup)...);
		}

		template <typename... Args>
		void func(std::tuple<Args...>& tup)
		{
			func(tup, helper::gen_seq<sizeof...(Args)>{});
		}

		void operator()()
		{
		  func(args);
		}

		void call()
		{
			func(args);
		}
};
class ThreadPool
{
  private:
   TaskQ q;
   std::vector<std::thread> _threads;
   uint32_t _nofthreads;
   std::atomic<int> _shutdown;
   std::atomic<int> _nofthreadsfree;
   static constexpr uint32_t _maxthreads = 5;
   std::mutex mut;
  public:

  ThreadPool(uint32_t const nofthreads):_nofthreads(nofthreads),_shutdown(0),_nofthreadsfree(0) { }
  ~ThreadPool()
  {
    for (auto& t : _threads ) {
      if(t.joinable())
      {
        t.join();
      }
    }
  }

  void Shutdown()
  {
    _shutdown=1;
    q.Shutdown();
  }

#if 0
   template <typename F, typename G, typename... Args>
   void preparetask(F&& func, G *obj, Args&&... args)
   {
       cout << "composeMsg..."<< endl;
       fn_handler = std::bind(func,(G*)obj,std::forward<Args>(args)...);
   }
#endif

 template <typename F,typename G, typename... Args>
// void DoTask(F&& f,  std::shared_ptr<G>	 obj, Args&&... args)
 void DoTask(int &taskid , F&& f, G& obj,std::string taskName, Args&&... args)

  {

     taskid=666;

     int noofargs = sizeof...(Args);

     std::lock_guard<std::mutex> lk(mut);
     std::cout << "\ntask name : "<< taskName <<std::endl;
     std::cout << "\nno of args: "<< noofargs <<std::endl;

    //auto fn = std::bind(f,obj);


    auto fn = std::bind(f,obj,std::placeholders::_1,std::placeholders::_2);


    if(_nofthreadsfree.load())
    {
      std::cout << "*************** using threadpool thread *********** " << std::endl;
      q.push(std::make_shared<Task_impl<Args...>>(fn,std::forward<Args>(args)...));
    }
    else if(_threads.size() < _maxthreads)
    {
      std::cout << "*************** Adding threadpool thread *********** " << std::endl;
      _threads.push_back(std::thread(&ThreadPool::CallMethod,this));
      q.push(std::make_shared<Task_impl<Args...>>(fn,std::forward<Args>(args)...));
    }else
    {
       std::cout << "*************** using direct thread *********** " << std::endl;
       _threads.push_back(std::thread(fn,std::forward<Args>(args)...));
    }

  }

  void start()
  {
     std::lock_guard<std::mutex> lk(mut);
    for(int i=0;i<_nofthreads; i++)
    {
      _threads.push_back(std::thread(&ThreadPool::CallMethod,this));
    }
   sleep(4);
  }

  uint32_t CountFreeThread() const
  {
    _nofthreadsfree.load();
  }


  void CallMethod()
  {
    while(true)
    {
      if(_shutdown.load()!=1)
      {
          /* when threads are waiting for task in queue then thread is free */
          ++_nofthreadsfree;
         std::cout << "_nofthreadsfree :" << _nofthreadsfree << std::endl;
         std::shared_ptr<Task> pTask=q.wait_and_pop();
         /* After shutdown initiated , pop will come with empty task.
            This check is needed to prevent calling empty task
         */
         if(_shutdown.load()!=1)
         {
           /* thread got the job, reduce the count of free thread */
           _nofthreadsfree--;
           sched_param sch;
           int policy;
           pthread_getschedparam(pthread_self(), &policy, &sch);
         std::cout << "policy :" << policy << std::endl;
         std::cout << "priority:" << sch.sched_priority << std::endl;

           sch.sched_priority = 20;
         int res=  pthread_setschedparam(pthread_self(), SCHED_FIFO, &sch);
std::cout << "setting policy :" << res << std::endl;
           pTask->call();

         res= pthread_getschedparam(pthread_self(), &policy, &sch);
         std::cout << "After policy :" << policy << std::endl;
         std::cout << "After priority:" << sch.sched_priority << std::endl;
         std::cout << "After res:" << res << std::endl;
         }
      }
      else
      {
        break;
      }
    }
  }
};
#endif /* TASK_H_ */
