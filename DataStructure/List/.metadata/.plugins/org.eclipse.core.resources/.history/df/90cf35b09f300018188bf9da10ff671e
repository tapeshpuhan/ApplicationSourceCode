/*
 * Queue.cpp
 *
 *  Created on: 26-Mar-2018
 *      Author: tapesh
 */

#include<iostream>
using namespace std;

template<typename T, size_t size>
class MyQueue
{
private:
	T Queue[size];
	size_t _size;
	int rear;
	int front;
public:
	MyQueue():_size(size),rear(-1),front(-1){}

	bool enQueue(T data);
	bool dQueue();
	T& Qfront();
	bool isEmpty();
	bool isFull();
	void display();
};
template<typename T, size_t size>
bool MyQueue<T,size>::enQueue(T data)
{
	if(isFull())
		return false;
	if(isEmpty())
	{
		rear = front = 0;
	}
	Queue[rear] = data;
	rear = (rear+1)%_size;
	return true;
}
template<typename T, size_t size>
bool MyQueue<T,size>::dQueue()
{
	if(isEmpty())
	{
		return false;
	}
	front = (front+1)%_size;
	if(front > rear)
	{
		rear = front = -1;
	}
}
template<typename T, size_t size>
T& MyQueue<T,size>::Qfront()
{
	if(!isEmpty())
	{
		return Queue[front];
	}
	return Queue[0];
}
template<typename T, size_t size>
bool MyQueue<T,size>::isEmpty()
{
	if(front == -1 && rear == -1)
		return true;
	else
		return false;
}
template<typename T, size_t size>
bool MyQueue<T,size>::isFull()
{
	return front = rear;
}
template<typename T, size_t size>
void MyQueue<T,size>:: display()
{

}
int main()
{
	return 0;
}
