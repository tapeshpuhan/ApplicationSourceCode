/*
 * FrameWirk.cpp
 *
 *  Created on: 04-Apr-2018
 *      Author: tapesh
 */
#include<iostream>
#include<vector>
#include<map>
#include<string>
#include<stack>
#include<unordered_map>
#include<memory>
#include<thread>
#include<initializer_list>
using namespace std;

template<typename T, typename Method>
class Command
{
	std::map<T,Method> callback_;
public:
	void exicute(T type)
	{
		callback_[type]();
	}
	void regCallback(T data, Method fun)
	{
		callback_[data] = fun;
	}
	void UnregCallback(T data)
	{
		std::map<T,Method>::iterator it = callback_.find(data);
		if(it != callback_.end())
		{
			callback_.erase(it);
		}
	}
};

class play
{
public:
	void operator()(std::string &str)
	{
		cout<<"hii"<<endl;
	}
};

int main()
{
	Command<string,shared_ptr<play>>
	return 0;
}
