/*
 * Task.h
 *
 *  Created on: 11-Apr-2018
 *      Author: tapesh
 */

#ifndef TASK_H_
#define TASK_H_

#include<iostream>
#include<string>
#include<vector>
#include<fstream>
#include<map>
#include<set>
#include <limits>
#include<memory>
#include<set>
#include <algorithm>
#include<queue>
#include <mutex>
#include <condition_variable>
#include<thread>
#include <deque>
#include<unordered_map>
#include <functional>

using namespace std;
class thrPool
{
	vector<thread> _lTh;
	vector<thread>::size_type max;
public:

	explicit thrPool(int m):max(m){}
	void exicute(const function<void()> &f)
	{
		if(_lTh.size()<max)
		{
			//_lTh.emplace_back(thread(&f,this));
		}
	}
	~thrPool()
	{
		for(auto &at:_lTh)
		{
			if(at.joinable())
				at.join();
		}
	}
};
#endif /* TASK_H_ */
