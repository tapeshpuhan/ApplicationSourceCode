/*
 * ActiveObject.cpp
 *
 *  Created on: 08-Apr-2018
 *      Author: tapesh
 */

#include "BaseFile.h"
using namespace std;

struct Task
{
	int getPrio()
	{
		return _prio;
	}
	void setPrio(int prio)
	{
		std::lock_guard<mutex> lk(mu);
		_prio = prio;
	}
	Task():_prio(50){}
	virtual void call(Task &t)=0;
	virtual ~Task(){}
private:
	std::mutex mu;
	int _prio;
};
class comp
{
public:
	bool operator()(Task &l, Task &r)
	{
		return l.getPrio() < r.getPrio();
	}
};

template<typename T>
class PrioQueue
{
	std::priority_queue<T,deque<T>,comp> _Queue;
	std::condition_variable _cond;
	std::mutex mut;
	std::atomic<int> _shutDown;
public:
	PrioQueue():_shutDown(0){

	}
	void push_task(T &&task)
	{
		std::lock_guard<mutex> lk(mut);
		_Queue.push_back(move(task));
		_cond.notify_one();
	}
	void push_task(const T &task)
	{

		std::lock_guard<mutex> lk(mut);
		_Queue.push_back(task);
		_cond.notify_one();
	}
	T waitPop()
	{
		T task;
		std::unique_lock<mutex> lk(mut);
		_cond.wait(lk,[=](){return _shutDown;});
		if(!_Queue.empty())
		{
			task = _Queue.front();
			_Queue.pop_front();
		}
		// Manual unlocking is done before notifying, to avoid waking up
		// the waiting thread only to block again (see notify_one for details
		lk.unlock();
		_cond.notify_one();
		return task;
	}
	void ShutDown()
	{
		_shutDown = 1;
	}
};

class ActiveObj
{
	std::thread th;
	std::atomic<int> _shutDown = false;
public:

	ActiveObj(){}
	virtual ~ActiveObj(){
		if(th.joinable())
		{
			th.join();
		}
	}
	void start();
	void methdpush(const Task &t);
	void callback();
	void shutdown();
};
void ActiveObj::start()
{
	std::thread(th,&ActiveObj::callback());
	if(th.joinable())
	{
		th.join();
	}
}
void
