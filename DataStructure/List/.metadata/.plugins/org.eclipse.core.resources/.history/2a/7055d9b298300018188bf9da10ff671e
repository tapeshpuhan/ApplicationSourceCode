#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

bool is_balanced(string expression) {
	bool found = true;
	set<char> Spair={'{','[','('};
	map<char,char> Tpair = {{'}','{'},{']','['},{')','('}};
	stack<char> Store;

	for(auto &at : expression)
	{
		if(!std::isspace(at) || at !='\n')
		{
			if(Spair.find(at)!=Spair.end())
			{
				Store.push(at);
			}
			else if(Tpair.find(at)!=Tpair.end())
			{
				if(!Store.empty()&&(Tpair[at]==Store.top()))
				{
					Store.pop();
				}
				else
				{
					return false;
				}
			}
			else
			{
				return false;
			}
		}
	}

	return found;
}

int main(){
    int t;
    cin >> t;
    for(int a0 = 0; a0 < t; a0++){
        string expression;
        cin >> expression;
        bool answer = is_balanced(expression);
        if(answer)
            cout << "YES\n";
        else cout << "NO\n";
    }
    return 0;
}
