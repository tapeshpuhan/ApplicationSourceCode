/*
 * Fixed_Array.cpp
 *
 *  Created on: 24-Mar-2018
 *      Author: tapesh
 */
#include<iostream>
#include<string>
#include<algorithm>
#include<initializer_list>

using namespace std;

template<typename T, size_t size>
class fixed_array
{
private:
	T array[size];
public:
	fixed_array(){}
	fixed_array(const initializer_list<T> &data){
		size_t i = 0;
		for(auto &at: data)
		{

			//i<size ? (array[i++] = at):;
			if(i<size)
			{
				array[i++] = at;
			}
		}
	}
	template<typename T, size_t osize>
	fixed_array(const fixed_array &rh)
	{
		copy
	}

	T& begin(){return array;}
	T& end(){return array+(size-1);}
};



