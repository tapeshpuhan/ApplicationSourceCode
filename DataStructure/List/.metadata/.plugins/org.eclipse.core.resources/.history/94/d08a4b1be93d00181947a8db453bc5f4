/*
 * Task.cpp
 *
 *  Created on: 11-Apr-2018
 *      Author: tapesh
 */

#include"Task.h"

class task
{
	int prio;
public:
	task():prio(0){}
	task(int p):prio(p){}
	bool operator >(task &op)
	{

		return this->prio > op.prio;

	}
	int get()
	{
		return prio;
	}
};

class player:public task
{
public:
	explicit player(int p):task(p){}
	void display()
	{
		cout<<"Prio "<<get()<<endl;
	}

};



class testing
{
	vector<int> vec;
	std::mutex mu;
	std::condition_variable cond;
	//atomic<int> po;
	int po;
public:
	testing()
{
}
	void read();
	void write();
};

void testing::read()
{
	while(1)
	{
		cout<<"Reader Thread start"<<endl;
		std::unique_lock<mutex> lk(mu);
		cond.wait(lk);

		for(int i = po;i<vec.size();i++)
		{
			cout<<"read "<<vec[i]<<endl;
		}
		po=(vec.size());
		cond.notify_one();
	}
}
void testing::write()
{
	while(1)
	{
		cout<<"Write Thread start"<<endl;
		std::unique_lock<mutex> lk(mu);
		cond.wait(lk);

		lk.lock();
		for(int i = 0; i < 5; i++)
		{
			vec.push_back(po++);
		}
		lk.unlock();
		cond.notify_one();
	}
}
int main()
{
	/*MesgQ<player> ob;
	player o1(1),o2(6),o3(3);

	ob.push(o1);
	ob.push(o2);
	ob.push(o3);
	auto at = ob.top();
	while(!ob.empty())
	{

		at = ob.top();
		at.display();
		ob.pop();
	}*/
	testing obj;
	thread th1 = thread (&testing::read,obj);
	thread th2 = thread(&testing::write,obj);

	if(th1.joinable())
	{
		th1.join();
	}
	if(th2.joinable())
	{
		th2.join();
	}
	while(1){}
	return 0;
}
