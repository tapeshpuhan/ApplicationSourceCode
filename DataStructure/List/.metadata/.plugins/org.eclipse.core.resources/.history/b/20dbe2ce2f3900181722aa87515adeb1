/*
 * ThreadPool.cpp
 *
 *  Created on: 06-Apr-2018
 *      Author: tapesh
 */
#include<iostream>
#include<functional>
#include<thread>
#include<vector>
#include<mutex>
#include<condition_variable>
#include<initializer_list>
#include<queue>

template<typename R, typename ...Arg>
class ThreadPool
{
public:
	using Task = std::function<R(Arg ...arg)>;
private:
	std::vector<std::thread> pools_;
	std::size_t poolSize_;
	std::queue<Task> Q_;
	std::mutex lock;
	std::condition_variable condition_;

	void start();
public:
	explicit ThreadPool(std::size_t pSize):poolSize_(pSize){
		start();
	}
	void enQueue()
	{

	}
	void start()
	{
		for(auto i=0; i< poolSize_&&)
	}

};



