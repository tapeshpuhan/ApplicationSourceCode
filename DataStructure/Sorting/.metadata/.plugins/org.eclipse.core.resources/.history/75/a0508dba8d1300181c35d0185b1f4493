/*
 * Sorting.cpp
 *
 *  Created on: 17-Feb-2018
 *      Author: tapesh
 */
#include"Sorting.h"

template<typename T>
void Sorting<T>::Insert(T pData)
{
	cout<<"Sorting :: Insert "<<pData<<endl;
	_data.push_back(pData);
}

template<typename T>
void Sorting<T>::Display()
{
	cout<<"Sorting :: Display"<<endl;
	for(auto at : _data)
	{
		cout<<at<<endl;
	}
}


template<typename T>
void Sorting<T>::Swap(vector<T> &Value, int source,int dest)
{
	auto temp = Value[source];
	Value[source] = Value[dest];
	Value[dest] = temp;
}
template<typename T>
void SelectionSort<T>::Sort()
{
	cout<<"SelectionSort :: Sort"<<endl;
	auto Small=Sorting<T>::_data[0];
	int index;
	bool changed =false;

	for (int i = 0; i < Sorting<T>::_data.size(); i++)
	{
		Small = Sorting<T>::_data[i];
		for(int j = i+1;j<Sorting<T>::_data.size();j++)
		{
			if(Sorting<T>::_data[j]<Small)
			{
				Small = Sorting<T>::_data[j];
				index = j;
				changed = true;
			}
		}
		if(changed)
		{
			Sorting<T>::Swap(Sorting<T>::_data, i,index);
		}
		changed = false;
	}
}
enum SortType
{
	eSelection=0,
	eInsertion,
	eBubble
};

int main()
{
	int type;
	cout<<"Selection :: 0 "<<"Insertion :: 1 "<<"Bubble :: 2"<<endl;

	cin>>type;
	switch(type)
	{
		case SortType::eSelection:
		{
			Sorting<int> *ptr =  new SelectionSort<int>;
			if(nullptr!= ptr)
			{
				vector<int> v = {23,56,24,1,567,234,34,900};
				for(auto at : v)
				{
					ptr->Insert(at);
				}
				ptr->Sort();
				ptr->Display();

				//vector<string> sv = {"tapu","papli","putul","mausi","ram"};
				vector<char> sv = {23,56,24,1,3,234,34,900};

				for(auto at : sv)
				{
					ptr->Insert(at);
				}
				ptr->Sort();
				ptr->Display();
			}

		}
		break;
	case SortType::eInsertion:
	{

	}
		break;
	case SortType::eBubble:
	{

	}
			break;
	default:
	{

	}
		break;
	}

	return 0;
}
